---
title: "`data.frame` vs `tibble`"
description: "Comparing data.frame and tibble behavior in R: creation, subsetting, printing, and more."
date: "2025-07-28"
categories: [R, data.frame, tibble, tribble]
editor_options: 
  chunk_output_type: console
---

```{r packages}
#| echo: false

library(tibble)
library(dplyr)
```


# Introduction

In R, tabular data is typically stored using either a `data.frame` or a
`tibble`.  
While they serve similar purposes, their behavior diverges in ways that affect
printing, subsetting, and workflow safety.

This post compares their creation and structure, highlights key differences, and
explains why tibbles are often the preferred choice in modern tidyverse
workflows.

# Create

Base R provides the `base::data.frame` structure for storing and manipulating
tabular data. A `data.frame` is essentially a `list` of equal-length vectors,
where each vector becomes a column.

Here's how to create a structured `data.frame` with five columns:

```{r}
df <-
  data.frame(
    is_vowel      = c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE,
                      FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      FALSE, FALSE),
    numbers       = 1:26,
    values        = seq(1.1, by = 0.1, length.out = 26),
    letters_lower = letters, # Built-in vector: "a" to "z"
    letters_upper = LETTERS  # Built-in vector: "A" to "Z"
  )
```

Tibbles are the tidyverse alternative to `data.frame`. Tibbles eliminate many of
the quirks of base R `data.frame`, making them safer and more predictable in
data workflows.

Here’s the `tibble` equivalent using `tibble::tibble`:

```{r}
tbl <-
  tibble(
    is_vowel      = c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE,
                      FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      FALSE, FALSE),
    numbers       = 1:26,
    values        = seq(1.1, by = 0.1, length.out = 26),
    letters_lower = letters,
    letters_upper = LETTERS
  )
```

While both structures store the same data, their behavior diverges in subtle but
important ways. Let's look at how they differ when printed, subsetted, or used
in a pipeline.

# Class

Although `df` and `tbl` store the same data, they belong to different object
classes:

```{r}
class(df)

class(tbl)
```

Tibbles extend base data-frames by layering two additional classes: `tbl` and
`tbl_df`. This class hierarchy enables customized printing, stricter subsetting,
and compatibility with tidyverse functions, all while remaining fully
interoperable with functions expecting a plain `data.frame`.

One can use `base::inherits` for targeted class checks:

```{r}
inherits(df, "data.frame")

inherits(tbl, "data.frame")

inherits(df, "tbl")

inherits(tbl, "tbl")
```

# Structure Comparison

At their core, both `df` and `tbl` are `list`s under the hood, each column is a
vector, and the object binds those vectors together under a tabular class.
However, `tibble`s carry extra metadata for printing and structure.

Let’s inspect them:

```{r}
typeof(df)

typeof(tbl)
```

Using `base::typeof` they appear identical. But `utils::str()` reveals more
subtle differences:

```{r}
str(df)

str(tbl)
```

This reinforces the idea that tibbles are still lists with class `data.frame`,
but their extra class layers change how they behave and display.

# Print

The first thing you’ll notice is how differently `data.frame` and `tibble`
print. Tibbles have a print method that shows only the first 10 rows, and all
the columns that fit on screen. This makes working with large datasets much
easier. Each column in a tibble includes a compact type annotation, such as:

- `<lgl>` — logical
- `<int>` — integer
- `<dbl>` — double
- `<chr>` — character

Let’s print both and compare their outputs.

```{r}
df

tbl
```

# Subset

Both `data.frame`s and `tibble`s support subsetting with `$`, `[`,
and `[[`, but they behave differently in edge cases. Tibbles tend to be
stricter and more predictable, helping catch subtle bugs early.

Let's walk through each subsetting method and compare how data.frame and tibble
behave under the hood.

## List Name Extractor `$`

In R, the `$ `operator, formally known as the **list name extractor**, is used
to access elements by name from objects that behave like `list`s, such as
`data.frame`s and `tibble`s.

```{r}
df$values

tbl$values
```

In both structures, `$` returns the column as a vector. But if the column name
doesn’t exist:

```{r}
df$missing_column   # Returns NULL silently

tbl$missing_column  # Warning: unknown column, returns NULL
```

Tibbles are stricter—they issue a warning when a column is missing. This makes
them safer for debugging and helps catch typos or mismatched names early in the
workflow.

Note that the common `$` syntax is a syntactic sugar:

```{r}
identical(`$`(df, "values"), df$values)

identical(`$`(tbl, "values"), tbl$values)
```

## Partial Matching

Unlike `tibble`s, base R `data.frame`s allow partial matching when accessing
column names:

```{r}
df$val # Matches 'values'

tbl$val # Warning: no such column, returns NULL
```

Base R’s partial matching stems from legacy flexibility, allowing quick
exploratory coding.
But in production workflows, this flexibility can introduce silent errors.
Tibbles' stricter behavior is generally safer.
Consider the following example:

```{r}
df$let # Ambiguous: matches multiple columns, returns NULL silently

tbl$let # Warning: requires exact match, returns NULL
```

In `data.frame`, `$let` silently returns `NULL`, since multiple columns begin
with `'let'`.
No warning is issued, making it easy to miss, especially inside larger pipelines
or wrapped functions.

Tibbles, by contrast, enforce exact matching.
They generate a warning when the column name isn’t found, helping you catch
typos and ambiguous references early.
This constraint reduces hidden bugs and promotes safer, more reliable code
through clear intent.

## Bracket Subsetting with `["colname"]`

When selecting one column with subset operator `[`, both structures preserve
column names and types, but the returned object matches the source:

```{r}
df["values"] # Returns a one-column data.frame

class(df) == class(df["values"])

tbl["values"] # Returns a one-column tibble

class(tbl) == class(tbl["values"])
```

This consistency helps maintain predictable behavior in pipelines and avoids
surprises when chaining operations.

Note that the common `[` syntax is a syntactic sugar:

```{r}
identical(`[`(df, "values"), df["values"])

identical(`[`(tbl, "values"), tbl["values"])
```

Subset operator can be used to select more columns:

```{r}
df[c("numbers", "letters_upper")]

tbl[c("numbers", "letters_upper")]
```

A numerical vector with columns position can also be provided:

```{r}
identical(df["values"], df[3])

identical(tbl["values"], tbl[3])

identical(df[c("numbers", "letters_upper")], df[c(2, 5)])

identical(tbl[c("numbers", "letters_upper")], tbl[c(2, 5)])
```

## Bracket Subsetting with `[ , "colname"]`

When subsetting with two indices, i.e. `df[, "values"]` we’re instructing R to
return all rows and a named column by character reference. While this syntax
appears identical across `data.frame` and `tibble`, the behavior differs in a
meaningful way:

```{r}
df[, "values"] # Returns a vector (column extracted)

is.data.frame(df[, "values"])

class(df[, "values"])

str(df[, "values"])

tbl[, "values"] # Returns a tibble (preserves tbl_df structure)

is_tibble(tbl[, "values"])

class(tbl[, "values"])

str(tbl[, "values"])
```

This behavior reflects tibble’s design philosophy: predictable and
structure-preserving results, especially useful in tidyverse pipelines.

## Extracting Columns with `[[ "colname" ]]` or `[[ position ]]`

The double-bracket operator `[[` is used to extract elements by name or
position with exact intent. Unlike `[`, which returns a one-column `data.frame`
or `tibble`, `[[` returns the column as a vector.

```{r}
df[["values"]] # Returns a vector

tbl[["values"]] # Returns a vector
```

`[[` supports also numeric indexing:

```{r}
all(df[["values"]]== df[[3]])

all(df[["values"]] == tbl[[3]])
```

Contrary to `[`, `[[` only allows extraction of a single element, not multiple
columns:

```{r}
#| error: true
df[[c(1,3)]]  # FALSE

tbl[[c(1,3)]]  # Error: only one element (column) can be extracted
```

What happens in the `data.frame` case is that when you pass `c(1, 3)` to
`df[[ ]]`, R doesn't extract multiple columns. Instead, it interprets the whole
vector as a compound index, which is valid but not intuitive.
In pratice `df[[c(1, 3)]]`  is equivalent to `df[[1]][3]`:

```{r}
identical(df[[c(1, 3)]], df[[1]][3])
```

In tidyverse workflows, `dplyr::pull` is a friendly wrapper around `[[`, with
added clarity:

```{r}
pull(df, "values")

pull(tbl, "values")
```

Note: `pull` works seamlessly with both `data.frame` and `tibble`.

As with `$` and `[ ]`, the `[[ ]]` operator is syntactic sugar:

```{r}
all(`[[`(df, "values") == df[["values"]])

all(`[[`(tbl, "values") == tbl[["values"]])
```

# Add a New Column Using `$<-`

Adding a new column to a `data.frame` using `$` will recycle the vector used if
its length is less than the number of rows of the `data.frame` (but assuming
that the number of elemnts of the vector is a submultiple of the number of rows
of the `data.frame`).

```{r}
df$more_numbers <- 27:28

df$more_numbers

dplyr::glimpse(df)
```

In general, a `tibble` does not allow it

```{r}
#| error: true

tbl$more_numbers <- 27:28
```

Unless we want to recycle a vector of length 1 or of length equal to the number
of rows:

```{r}
tbl$more_numbers <- 27:52 # Length 26 — accepted
tbl$constant <- 53        # Length 1 — accepted

glimpse(tbl)
```

Also the `$<-` assignment is syntactic sugar:

```{r}
# let's restart from the original df
df <-
  data.frame(
    is_vowel      = c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE,
                      FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      FALSE, FALSE),
    numbers       = 1:26,
    values        = seq(1.1, by = 0.1, length.out = 26),
    letters_lower = letters, # Built-in vector: "a" to "z"
    letters_upper = LETTERS  # Built-in vector: "A" to "Z"
  )

# create a new column
`$<-`(df, "another_constant", 54)

# let's restart from the original tbl
tbl <-
  tibble(
    is_vowel      = c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE,
                      FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,
                      FALSE, FALSE),
    numbers       = 1:26,
    values        = seq(1.1, by = 0.1, length.out = 26),
    letters_lower = letters,
    letters_upper = LETTERS
  )

# similarly for tibbles
`$<-`(tbl, "another_constant", 54)
```

Note that Using `$<-` in this manner returns a modified copy but does not alter
the original df or tbl object unless explicitly reassigned.

```{r}
glimpse(df)

glimpse(tbl)
```


# Summary of Differences

| Feature                              | `data.frame`                            | `tibble`                                 |
|--------------------------------------|-----------------------------------------|------------------------------------------|
| Class structure                      | `data.frame`                            | `tbl_df`, `tbl`, `data.frame`            |
| Printing                             | Prints entire object                    | First 10 rows, compact column metadata   |
| `$` with typo                        | Returns `NULL` silently                 | Returns `NULL` with warning              |
| Partial matching                     | Allowed                                 | Disallowed                               |
| `$` access                           | Returns column as vector                | Returns column as vector                 |
| `[ "<colname>" ]`or `[ <pos> ]`      | Returns one-column `data.frame`         | Returns one-column tibble                |
| `[ multi-column ]`                   | Preserves source structure              | Preserves source structure               |
| `[ , "colname" ]`                    | Returns column as vector                | Returns one-column tibble                |
| `[[ "<colname>" ]]` or `[[ <pos> ]]` | Returns column as vector                | Returns column as vector                 |
| `[[ multi-pos ]]`                    | Ambiguous compound index → scalar value | Error: only one column can be extracted  |
| `dplyr::pull()`                      | Supported                               | Supported                                |
| `$<-` with short vector              | Recycles if length divides evenly       | Error unless length is 1 or matches nrow |
| `$<-` with length mismatch           | Warns but allows                        | Throws error                             |

# Create by Row: `tribble()`

The `tibble::tribble` function ("transposed tibble") offers a readable,
row-wise syntax that makes small tables clearer, especially in documentation,
examples, and teaching material.

```{r}
tribble(
  ~letters, ~numbers,
  "a",      1,
  "b",      2,
  "c",      3
)
```

Advantages:

- Column headers preceded by `~`: Visually distinguishes variables.

- Row-wise entry: Mirrors how we often conceptualize tables.

- Safe type inference: Similar to `tibble`, avoids surprises.

Base R doesn't offer a native row-wise constructor for `data.frame`, and there
are not simple workarounds (as far as I know!). Base R can construct row-wise
structures using `rbind`, but these have major limitations:

```{r}
mat <- rbind(
  c("a", 1),
  c("b", 2),
  c("c", 3)
)

mat
```

This returns a character `matrix` not a `data.frame`. Type information is lost
due to coercion:

```{r}
typeof(mat)
```

# References

- [Tibble](https://tibble.tidyverse.org/index.html) package documentation

- [Help Manual](https://tidyverse.r-universe.dev/tibble/doc/manual.html) from r-universe.dev

- [Tibble](https://posit.co/blog/tibble-1-0-0/) from Posit blog

- [The Trouble with Tibbles](https://www.jumpingrivers.com/blog/the-trouble-with-tibbles/) from Jumping Rivers

